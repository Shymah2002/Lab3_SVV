// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorMusaModel")]
    public partial class UsingCalculatorMusaModelFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UsingCalculatorMusaModel", "  In order to estimate reliability using Musa model\r\n  As a Software Quality Metr" +
                "ic enthusiast\r\n  I want to compute the Musa expected failures (mu) and failure i" +
                "ntensity (lambda)", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "UsingCalculatorMusaModel.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Musa expected failures mu(t)")]
        [NUnit.Framework.CategoryAttribute("Musa")]
        [NUnit.Framework.CategoryAttribute("Mu")]
        public async System.Threading.Tasks.Task CalculatingMusaExpectedFailuresMuT()
        {
            string[] tagsOfScenario = new string[] {
                    "Musa",
                    "Mu"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Musa expected failures mu(t)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.WhenAsync("I have entered 50 and 0.01 and 100 into the calculator and press MusaMu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
    await testRunner.ThenAsync("the Musa Mu result should be \"34.65735902799727\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Musa expected failures with time = 0")]
        [NUnit.Framework.CategoryAttribute("Musa")]
        [NUnit.Framework.CategoryAttribute("Mu")]
        public async System.Threading.Tasks.Task CalculatingMusaExpectedFailuresWithTime0()
        {
            string[] tagsOfScenario = new string[] {
                    "Musa",
                    "Mu"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Musa expected failures with time = 0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 14
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 15
    await testRunner.WhenAsync("I have entered 50 and 0.01 and 0 into the calculator and press MusaMu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
    await testRunner.ThenAsync("the Musa Mu result should be \"0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Musa expected failures with negative total failures (invalid input)")]
        [NUnit.Framework.CategoryAttribute("Musa")]
        [NUnit.Framework.CategoryAttribute("Mu")]
        public async System.Threading.Tasks.Task CalculatingMusaExpectedFailuresWithNegativeTotalFailuresInvalidInput()
        {
            string[] tagsOfScenario = new string[] {
                    "Musa",
                    "Mu"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Musa expected failures with negative total failures (invalid input)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
    await testRunner.WhenAsync("I have entered 50 and -10 and 100 into the calculator and press MusaMu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.ThenAsync("the Musa Mu result should be \"Error\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Musa failure intensity lambda(t)")]
        [NUnit.Framework.CategoryAttribute("Musa")]
        [NUnit.Framework.CategoryAttribute("Lambda")]
        public async System.Threading.Tasks.Task CalculatingMusaFailureIntensityLambdaT()
        {
            string[] tagsOfScenario = new string[] {
                    "Musa",
                    "Lambda"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Musa failure intensity lambda(t)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
    await testRunner.WhenAsync("I have entered 50 and 0.01 and 100 into the calculator and press MusaLambda", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
    await testRunner.ThenAsync("the Musa Lambda result should be \"0.25\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Musa failure intensity with negative initial intensity")]
        [NUnit.Framework.CategoryAttribute("Musa")]
        [NUnit.Framework.CategoryAttribute("Lambda")]
        public async System.Threading.Tasks.Task CalculatingMusaFailureIntensityWithNegativeInitialIntensity()
        {
            string[] tagsOfScenario = new string[] {
                    "Musa",
                    "Lambda"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Musa failure intensity with negative initial intensity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 32
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
    await testRunner.WhenAsync("I have entered -5 and 0.01 and 100 into the calculator and press MusaLambda", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("the Musa Lambda result should be \"Error\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculating Musa failure intensity with very small time")]
        [NUnit.Framework.CategoryAttribute("Musa")]
        [NUnit.Framework.CategoryAttribute("Lambda")]
        public async System.Threading.Tasks.Task CalculatingMusaFailureIntensityWithVerySmallTime()
        {
            string[] tagsOfScenario = new string[] {
                    "Musa",
                    "Lambda"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Calculating Musa failure intensity with very small time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
    await testRunner.GivenAsync("I have a calculator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
    await testRunner.WhenAsync("I have entered 50 and 0.01 and 0.001 into the calculator and press MusaLambda", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
    await testRunner.ThenAsync("the Musa Lambda result should be \"0.499995\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
